<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AoPing&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aoping.github.io/"/>
  <updated>2017-12-26T23:21:43.133Z</updated>
  <id>https://aoping.github.io/</id>
  
  <author>
    <name>敖平</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git</title>
    <link href="https://aoping.github.io/2017/12/25/git-flow/"/>
    <id>https://aoping.github.io/2017/12/25/git-flow/</id>
    <published>2017-12-25T07:35:28.000Z</published>
    <updated>2017-12-26T23:21:43.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="http://www.yiibai.com/git/" target="_blank" rel="external">http://www.yiibai.com/git/</a></p><h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2><h3 id="git-pull-lt-远程主机名-gt-lt-远程分支名-gt-lt-本地分支名-gt"><a href="#git-pull-lt-远程主机名-gt-lt-远程分支名-gt-lt-本地分支名-gt" class="headerlink" title="git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;"></a>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</h3><h3 id="git-push-远程仓库别名-推送分支"><a href="#git-push-远程仓库别名-推送分支" class="headerlink" title="git push 远程仓库别名 推送分支"></a>git push 远程仓库别名 推送分支</h3><p>推送本地分支到远程仓库，这2个参数缺省分别就是 origin 、 当前分支（一般为master）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git push origin master</div><div class="line">可以简写成</div><div class="line">git push</div></pre></td></tr></table></figure></p><h4 id="options"><a href="#options" class="headerlink" title="options"></a>options</h4><p>-u 设置本地分支去跟踪远程对应的分支</p><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p>rebase操作过程是把本地提交一次一个地迁移到更新了的中央仓库master分支之上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull --rebase</div></pre></td></tr></table></figure></p><p>如果有冲突，用git status查看，解决冲突后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add &lt;some-file&gt; </div><div class="line">git rebase --continue</div></pre></td></tr></table></figure></p><p>取消rebase<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase --abort</div></pre></td></tr></table></figure></p><h3 id="git-patch"><a href="#git-patch" class="headerlink" title="git patch"></a>git patch</h3><p>git diff生成patch文件<br>或者pull request生成的patch文件（在连接上加上.patch即可知道链接）<br>vscode安装git patch插件可以生成文件</p><p>参考：<a href="http://www.ruanyifeng.com/blog/2017/07/pull_request.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/07/pull_request.html</a></p><h2 id="git流程"><a href="#git流程" class="headerlink" title="git流程"></a>git流程</h2><p>参考：<br><a href="https://github.com/oldratlee/translations/tree/master/git-workflows-and-tutorials" target="_blank" rel="external">https://github.com/oldratlee/translations/tree/master/git-workflows-and-tutorials</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;教程&quot;&gt;&lt;a href=&quot;#教程&quot; class=&quot;headerlink&quot; title=&quot;教程&quot;&gt;&lt;/a&gt;教程&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.yiibai.com/git/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ht
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node项目服务器部署</title>
    <link href="https://aoping.github.io/2017/12/25/node-server/"/>
    <id>https://aoping.github.io/2017/12/25/node-server/</id>
    <published>2017-12-25T01:50:21.000Z</published>
    <updated>2017-12-25T14:40:57.840Z</updated>
    
    <content type="html"><![CDATA[<ul><li>pm2 nodejs进程管理工具</li><li>nodemon 监视文件变动，自动刷新服务器</li><li>nginx</li><li>docker</li><li>mongodb</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;pm2 nodejs进程管理工具&lt;/li&gt;
&lt;li&gt;nodemon 监视文件变动，自动刷新服务器&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;docker&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="node" scheme="https://aoping.github.io/categories/node/"/>
    
    
      <category term="node" scheme="https://aoping.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>vue实践</title>
    <link href="https://aoping.github.io/2017/12/25/vue-index/"/>
    <id>https://aoping.github.io/2017/12/25/vue-index/</id>
    <published>2017-12-25T01:49:35.000Z</published>
    <updated>2017-12-25T14:40:57.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue最佳实践"><a href="#vue最佳实践" class="headerlink" title="vue最佳实践"></a>vue最佳实践</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue最佳实践&quot;&gt;&lt;a href=&quot;#vue最佳实践&quot; class=&quot;headerlink&quot; title=&quot;vue最佳实践&quot;&gt;&lt;/a&gt;vue最佳实践&lt;/h2&gt;
      
    
    </summary>
    
      <category term="vue" scheme="https://aoping.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://aoping.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>css之css module</title>
    <link href="https://aoping.github.io/2017/12/24/css-index/"/>
    <id>https://aoping.github.io/2017/12/24/css-index/</id>
    <published>2017-12-24T08:11:48.000Z</published>
    <updated>2017-12-24T08:12:51.962Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="css" scheme="https://aoping.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://aoping.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>web构建——webpack详解</title>
    <link href="https://aoping.github.io/2017/12/23/build-tools/"/>
    <id>https://aoping.github.io/2017/12/23/build-tools/</id>
    <published>2017-12-23T02:09:10.000Z</published>
    <updated>2017-12-23T13:50:28.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建目的"><a href="#构建目的" class="headerlink" title="构建目的"></a>构建目的</h1><p>压缩<br>优化<br>缓存<br>分离js css</p><a id="more"></a><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>一切皆模块</li><li>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>局部安装执行命令要写完整路径<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install webpack webpack-dev-server -g <span class="comment">// 全局安装</span></div><div class="line">npm install webpack webpack-dev-server --save-dev <span class="comment">// 局部安装</span></div><div class="line"></div><div class="line">npm install webpack@<span class="number">1.2</span>.x --save-dev <span class="comment">// 局部安装webpack1</span></div></pre></td></tr></table></figure></p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>webpack配置文件默认名为webpack.config.js<br>在命令行输入webpack/webpack-dev-server，会在命令执行目录下找webpack.config.js<br>如果webpack配置文件名字不为webpack.config.js，或不在命令执行目录下，可以输入<figure class="highlight plain"><figcaption><span>--config ./build/webpack.dev.js ```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">webpack index.js bundle.js --colors // 把index.js打包成bundle.js</div></pre></td></tr></table></figure></p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>–progress 打印打包日志</p><p>–colors 带颜色的日志</p><p>–watch 监控自动打包</p><p>-d 生成map映射文件</p><p>-p 压缩混淆脚本</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p>context说明:</p><ol><li>它是一个绝对路径，所以要用到path.resolve函数</li><li>不设表示起点目录是当前目录</li><li>入口文件是在context指定的目录为基础，再往下找</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">context: path.resolve(__dirname,<span class="string">'src'</span>)</div></pre></td></tr></table></figure><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><ul><li>可为string object array<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 多入口</span></div><div class="line">entry: &#123;</div><div class="line">    index: <span class="string">'./src/index.js'</span>,</div><div class="line">    main: <span class="string">'./src/main.js'</span></div><div class="line">&#125;</div><div class="line">entry: [<span class="string">'./src/index.js'</span>,<span class="string">'./src/main.js'</span>]</div><div class="line"><span class="comment">// 或单入口</span></div><div class="line">entry: <span class="string">'./src/index.js'</span></div></pre></td></tr></table></figure></li></ul><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><ul><li>filename必须</li><li>filename可以用[name] | [id] | [hash] | [chunkhash]来命名<br>  [name] 与entry中的key相同<br>  [id] 与entry中顺序相同，从0开始<br>  [hash] 每次都不同<br>  [chunkhash] 文件变化才会改变</li><li>path需是绝对路径，不指定时表示当前目录<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">    filename: <span class="string">'[name].js'</span>,</div><div class="line">    path: path.resolve(<span class="string">'./build'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>开启监听模式</p><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><p>定义了解析模块路径时的配置，常用的就是extensions，可以用来指定模块的后缀，这样在引入模块时就不需要写后缀了，会自动补全<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h3><p>devtool选项   配置结果</p><p>source-map  在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包速度；</p><p>cheap-module-source-map    在一个单独的文件中生成一个不带列映射的map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</p><p>eval-source-map    使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在<strong> 开发阶段 </strong>这是一个非常好的选项，在生产阶段则一定不要启用这个选项；</p><p>cheap-module-eval-source-map    这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点；</p><h3 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">    rules: [</div><div class="line">        &#123;</div><div class="line">            test: <span class="regexp">/\.css$/</span>,</div><div class="line">            use: [</div><div class="line">                &#123;<span class="attr">loader</span>: <span class="string">'style-loader'</span>&#125;,</div><div class="line">                &#123;<span class="attr">loader</span>: <span class="string">'css-loader'</span>&#125;,</div><div class="line">                &#123;<span class="attr">loader</span>: <span class="string">'less-loader'</span>&#125;</div><div class="line">            ],</div><div class="line">            exclude: <span class="regexp">/node_modules/</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            test: <span class="regexp">/\.css$/</span>,</div><div class="line">            loader: <span class="string">'style!css!sass'</span>,</div><div class="line">            exclude: <span class="regexp">/node_modules/</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            test: <span class="regexp">/\.css$/</span>,</div><div class="line">            use: [</div><div class="line">                &#123;</div><div class="line">                    loader: <span class="string">"style-loader"</span></div><div class="line">                &#125;, &#123;</div><div class="line">                    loader: <span class="string">"css-loader"</span>,</div><div class="line">                    options: &#123;</div><div class="line">                        modules: <span class="literal">true</span>, <span class="comment">// 指定启用css modules</span></div><div class="line">                        localIdentName: <span class="string">'[name]__[local]--[hash:base64:5]'</span> <span class="comment">// 指定css的类名格式</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            test: <span class="regexp">/\.vue$/</span>,</div><div class="line">            loader: <span class="string">'vue-loader'</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            test: <span class="regexp">/(\.jsx|\.js)$/</span>,</div><div class="line">            use: &#123;</div><div class="line">                loader: <span class="string">"babel-loader"</span>,</div><div class="line">                options: &#123;</div><div class="line">                    presets: [</div><div class="line">                        <span class="string">"env"</span>, <span class="string">"react"</span></div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            exclude: <span class="regexp">/node_modules/</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>loader从右到左加载</li><li>webpack3.<em>/webpack2.</em>已经内置可处理JSON文件</li></ul><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>test：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）<br>use:<br>    loader：loader的名称（必须）<br>    options<br>include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；<br>query：为loaders提供额外的设置选项（可选）</p><h4 id="常用loader"><a href="#常用loader" class="headerlink" title="常用loader"></a>常用loader</h4><ul><li><p>babel-loader： 让下一代的js文件转换成现代浏览器能够支持的JS文件。</p><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><pre><code>安装列表：babel-corebabel-cli(如果在命令行使用)babel-loaderbabel预置（babel-preset-&lt;es2015,es2016,es2017,env,stage-0,stage-1,stage-2,stage-3&gt;）babel插件(babel-plugin-&lt;transform-object-rest-spread&gt;)</code></pre><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>  babel有些复杂，所以大多数都会新建一个.babelrc进行配置</p><p>  方法一：在.babelrc或.babelrc.js中</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"presets"</span>: [ <span class="string">"env"</span>, <span class="string">"stage-0"</span>],</div><div class="line">    <span class="attr">"plugins"</span>: [ <span class="string">"transform-object-rest-spread"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>  方法二：在package.json中</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">    <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">    <span class="attr">"scripts"</span>: &#123;</div><div class="line">        <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">    <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">        <span class="attr">"babel-loader"</span>: <span class="string">"^7.1.2"</span>,</div><div class="line">        <span class="attr">"babel-plugin-transform-object-rest-spread"</span>: <span class="string">"^6.26.0"</span>,</div><div class="line">        <span class="attr">"webpack"</span>: <span class="string">"^3.10.0"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"babel"</span> :&#123;</div><div class="line">        <span class="attr">"presets"</span>: [ <span class="string">"env"</span>, <span class="string">"stage-0"</span>],</div><div class="line">        <span class="attr">"plugins"</span>: [ <span class="string">"transform-object-rest-spread"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>css-loader,style-loader:两个建议配合使用，用来解析css文件，能够解释@import,url()如果需要解析less就在后面加一个less-loader<br>  css-loader: css-loader使你能够使用类似@import 和 url(…)的方法实现 require()的功能<br>  style-loader: 将所有的计算后的样式加入页面中<br>  postcss-loader: </p></li><li>autoprefixer-loader</li><li>file-loader: 生成的文件名就是文件内容的MD5哈希值并会保留所引用资源的原始扩展名</li><li><p>url-loader: 功能类似 file-loader,但是文件大小低于指定的限制时，可以返回一个DataURL事实上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line">&#123;</div><div class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</div><div class="line">    use: [</div><div class="line">        &#123;</div><div class="line">        loader: <span class="string">'url-loader'</span>,</div><div class="line">        options: &#123;</div><div class="line">            limit: <span class="number">8192</span></div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>vue-loader</p></li></ul><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><h4 id="常用plugin"><a href="#常用plugin" class="headerlink" title="常用plugin"></a>常用plugin</h4><ul><li><p>CommonsChunkPlugin: 在打包多个入口文件时会提取出公用的部分，生成common.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> commonsPlugin = <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>);</div></pre></td></tr></table></figure></li><li><p>ExtractTextWebpackPlugin: 它会将入口中引用css文件，都打包都独立的css文件中，而不是内嵌在js打包文件中<br>从bundle中提取文本，单独存一个文件，最常用的是将css单独放在一个文件中，当style样式比较大时，这个办法比较好，会加快很多，因为样式和js可以同时请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</div><div class="line"><span class="keyword">var</span> lessRules = &#123;</div><div class="line">    use: [</div><div class="line">        &#123;<span class="attr">loader</span>: <span class="string">'css-loader'</span>&#125;,</div><div class="line">        &#123;<span class="attr">loader</span>: <span class="string">'less-loader'</span>&#125;</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> baseConfig = &#123;</div><div class="line">    <span class="comment">// ... </span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        rules: [</div><div class="line">            <span class="comment">// ...</span></div><div class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>: ExtractTextPlugin.extract(lessRules)&#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    plugins: [BannerPlugin</div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'main.css'</span>) <span class="comment">// 参数如果是字符串表示css文件名</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>HtmlWebpackPlugin: 依据一个简单的index.html模版，生成一个自动引用你打包后的js文件的新index.html<br>自动生成入口文件dist/index.html，这个文件不会实际生成，只是放在内存中，即使有实际的文件 dist/index.html，也不会读取，还是读取自动生成在内存中的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</div><div class="line"><span class="keyword">var</span> baseConfig = &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    plugins: [</div><div class="line">        <span class="keyword">new</span> HTMLWebpackPlugin()</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line">或</div><div class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">    filename: <span class="string">'index.html'</span>,</div><div class="line">    template: <span class="string">'./template/index.html'</span>,</div><div class="line">    inject: <span class="literal">true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p>HotModuleReplacementPlugin: 它允许你在修改组件代码时，自动刷新实时预览修改后的结果注意永远不要在生产环境中使用HMR。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div></pre></td></tr></table></figure></li><li><p>OccurenceOrderPlugin: 为组件分配ID,通过这个插件webpack可以分析和优先考虑使用最多 的模块，然后为他们分配最小的ID</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin()</div></pre></td></tr></table></figure></li><li><p>UglifyJsPlugin: 压缩代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin()</div><div class="line">或</div><div class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</div><div class="line"><span class="keyword">new</span> UglifyJsPlugin()</div></pre></td></tr></table></figure></li><li><p>BannerPlugin: 在打包的文件中添加注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bannerPlugin = <span class="keyword">new</span> webpack.BannerPlugin(&#123;</div><div class="line">  banner: <span class="string">'// &#123; "framework": "Vue" &#125;\n'</span>,</div><div class="line">  raw: <span class="literal">true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p>NamedModulesPlugin: 显示模块名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new webpack.NamedModulesPlugin()</div></pre></td></tr></table></figure></li><li><p>autoprefixer</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</div></pre></td></tr></table></figure><ul><li>OccurenceOrderPlugin:为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin()</div></pre></td></tr></table></figure><ul><li>clean-webpack-plugin</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cnpm install clean-webpack-plugin --save-dev</div><div class="line"></div><div class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</div><div class="line">  plugins: [</div><div class="line">    ...<span class="comment">// 这里是之前配置的其它各种插件</span></div><div class="line">    <span class="keyword">new</span> CleanWebpackPlugin(<span class="string">'build/*.*'</span>, &#123;</div><div class="line">      root: __dirname,</div><div class="line">      verbose: <span class="literal">true</span>,</div><div class="line">      dry: <span class="literal">false</span></div><div class="line">  &#125;)</div><div class="line">  ]</div></pre></td></tr></table></figure><h2 id="区分环境"><a href="#区分环境" class="headerlink" title="区分环境"></a>区分环境</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// package.json</span></div><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"NODE_ENV=development webpack-dev-server"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"NODE_ENV=production webpack"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ENV = process.env.NODE_ENV</div><div class="line"><span class="keyword">var</span> baseConfig = &#123;</div><div class="line">    <span class="comment">// ... </span></div><div class="line">    plugins: [</div><div class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">            <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(ENV)</div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>方法一：在webpack.config.js里配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">devServer: &#123;</div><div class="line">    contentBase: path.join(__dirname, <span class="string">"../public"</span>), <span class="comment">//　根目录为 ./public下</span></div><div class="line">    port: <span class="number">9000</span>, <span class="comment">// 端口</span></div><div class="line">    hot:<span class="literal">true</span>, <span class="comment">// 当有文件变动时，网页重新刷新</span></div><div class="line">    <span class="comment">// 这里得装一个插件webpack.HotModuleReplacementPlugin，但当webpack 或 webpack-dev-server启动时，有参考 --hot，那么就不用装这个插件</span></div><div class="line">    inline: <span class="literal">true</span>, <span class="comment">// 默认是true ?????</span></div><div class="line">    open: <span class="literal">true</span> <span class="comment">// 自动打开默认浏览器</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>方法二：命令行<br>这种方式会自动刷新页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --hot --inline --hotOnly</div></pre></td></tr></table></figure></p><p>–hot: adds the HotModuleReplacementPlugin and switch the server to hot mode.<br>–inline: embed the webpack-dev-server runtime into the bundle.<br>–hot –inline: also adds the webpack/hot/dev-server entry.<br>–open: 自动打开默认浏览器</p><p>方法三：插件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>)</div><div class="line"><span class="keyword">var</span> webpack =<span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>)</div><div class="line"></div><div class="line"><span class="keyword">new</span> webpackDevServer(webpack(config),&#123;</div><div class="line">    hot: <span class="literal">true</span>,</div><div class="line">    historyApiFallback: <span class="literal">true</span></div><div class="line">&#125;).listen(<span class="number">3000</span>, <span class="string">'localhost'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Listening at localhost:3000'</span>);</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><p>devserver的配置选项    功能描述<br>contentBase    默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）<br>port    设置默认监听端口，如果省略，默认为”8080“<br>inline    设置为true，当源文件改变时会自动刷新页面<br>historyApiFallback    在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</p><h2 id="打包方式"><a href="#打包方式" class="headerlink" title="打包方式"></a>打包方式</h2><ul><li><p>命令行<br>｀｀｀<br>webpack<br>webpack-dev-server<br>｀｀｀</p></li><li><p>使用webpack依赖包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// build.js</span></div><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);</div><div class="line">webpack(webpackConfig, (err, stats) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'已打包好了，我们做点别的事'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 执行</span></div><div class="line">node build.js</div></pre></td></tr></table></figure><ul><li>使用webpack编译器<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 编译器运行比上面要快些，没有监视，只是编译</span></div><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);</div><div class="line"><span class="keyword">const</span> compiler = webpack(webpackConfig)</div><div class="line">compiler.run( <span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'已打包好了，我们做点别的事...'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 监视&amp;编译</span></div><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpackfile.js'</span>);</div><div class="line"><span class="keyword">const</span> compiler = webpack(webpackConfig)</div><div class="line"><span class="keyword">const</span> watching = compiler.watch(&#123;</div><div class="line">  <span class="comment">/* watchOptions */</span></div><div class="line">&#125;, (err, stats) =&gt; &#123;</div><div class="line">  <span class="comment">// Print watch/build result here...</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'我一直在监视着呢'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h2 id="专题"><a href="#专题" class="headerlink" title="专题"></a>专题</h2><h3 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h3><p>HMR意思是不需要刷新页面，改动就可以直接展示在页面上，依赖于webpack-dev-server<br>首先需要安装这两个库，npm install –save-dev webpack-dev-server react-hot-loader<br>安装完成后，就要开始配置了，首先需要修改entry配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">  helloworld: [</div><div class="line">    &apos;webpack-dev-server/client?http://localhost:3000&apos;,</div><div class="line">    &apos;webpack/hot/only-dev-server&apos;,</div><div class="line">    &apos;./helloworld&apos;</div><div class="line">  ]</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p><p>通过这种方式指定资源热启动对应的服务器，然后需要配置react-hot-loader到loaders的配置当中，比如我的所有组件代码全部放在scripts文件夹下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: /\.js?$/,</div><div class="line">  loaders: [&apos;react-hot&apos;, &apos;babel&apos;],</div><div class="line">  include: [path.join(__dirname, &apos;scripts&apos;)]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>再配置一下plugins，加上热替换的插件和防止报错的插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">  new webpack.HotModuleReplacementPlugin(),</div><div class="line">  new webpack.NoErrorsPlugin()</div><div class="line">]</div></pre></td></tr></table></figure></p><p>最后在index.js里加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//HMR 接口</div><div class="line">if(module.hot)&#123;</div><div class="line">    module.hot.accept(&apos;./component&apos;,()=&gt;&#123;</div><div class="line">        const nextComponent=component();</div><div class="line">        document.body.replaceChild(nextComponent,demoComponent);</div><div class="line">        demoComponent=nextComponent;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样配置就完成了，但是现在要调试需要启动一个服务器，而且之前配置里映射到<a href="http://localhost:3000，所以就在本地3000端口起个服务器吧，在项目根目录下面建个server.js：" target="_blank" rel="external">http://localhost:3000，所以就在本地3000端口起个服务器吧，在项目根目录下面建个server.js：</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&apos;webpack&apos;);</div><div class="line">var WebpackDevServer = require(&apos;webpack-dev-server&apos;);</div><div class="line">var config = require(&apos;./webpack.config&apos;);</div><div class="line"></div><div class="line">new WebpackDevServer(webpack(config), &#123;</div><div class="line">  publicPath: config.output.publicPath,</div><div class="line">  hot: true,</div><div class="line">  historyApiFallback: true</div><div class="line">&#125;).listen(3000, &apos;localhost&apos;, function (err, result) &#123;</div><div class="line">  if (err) console.log(err);</div><div class="line">  console.log(&apos;Listening at localhost:3000&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h3 id="vue-HMR"><a href="#vue-HMR" class="headerlink" title="vue HMR"></a>vue HMR</h3><p>// TODOS</p><h3 id="react-HMR"><a href="#react-HMR" class="headerlink" title="react HMR"></a>react HMR</h3><p>// TODOS</p><h3 id="express-HMR"><a href="#express-HMR" class="headerlink" title="express HMR"></a>express HMR</h3><p>// TODOS</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ul><li><p>命令行把index.js打包成bundle.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack ./index.js bundle.js --colors</div></pre></td></tr></table></figure></li><li><p>js引入js/css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'2.js'</span>)</div><div class="line"><span class="built_in">require</span>(<span class="string">'style!css!./main.css'</span>)</div></pre></td></tr></table></figure></li><li><p>打包css<br>  方法一：引入css时解析</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(&apos;style!css!./main.css&apos;)</div></pre></td></tr></table></figure><p>  方法二：命令行</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack ./entry.js bundle.js --module-bind &apos;css=style!css&apos;</div></pre></td></tr></table></figure><p>  方法三：配置文件</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">    rules: [</div><div class="line">        &#123;</div><div class="line">            test: <span class="regexp">/\.css$/</span>,</div><div class="line">            loader: <span class="string">"style!css"</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="babel-https-babeljs-io"><a href="#babel-https-babeljs-io" class="headerlink" title="babel https://babeljs.io/"></a>babel <a href="https://babeljs.io/" target="_blank" rel="external">https://babeljs.io/</a></h1><h2 id="babel-stage"><a href="#babel-stage" class="headerlink" title="babel stage"></a>babel stage</h2><p>stage-0 = stage-1 + transform-do-expressions + transform-function-bind<br>stage-1 = stage-2 + transform-class-constructor-call (Deprecated) + transform-class-properties + transform-decorators +<br> transform-export-extensions<br>stage-2 = stage-3 + syntax-trailing-function-commas + transform-object-reset-spread<br>stage-3 = transform-async-to-generator + transform-exponentiation-operator</p><h2 id="命令行-1"><a href="#命令行-1" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel script.js --presets stage-0</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;构建目的&quot;&gt;&lt;a href=&quot;#构建目的&quot; class=&quot;headerlink&quot; title=&quot;构建目的&quot;&gt;&lt;/a&gt;构建目的&lt;/h1&gt;&lt;p&gt;压缩&lt;br&gt;优化&lt;br&gt;缓存&lt;br&gt;分离js css&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>windows-software</title>
    <link href="https://aoping.github.io/2017/11/28/windows-software/"/>
    <id>https://aoping.github.io/2017/11/28/windows-software/</id>
    <published>2017-11-28T01:32:37.000Z</published>
    <updated>2017-12-23T02:08:11.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装机软件"><a href="#装机软件" class="headerlink" title="装机软件"></a>装机软件</h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ol><li>谷歌浏览器 √</li><li>360浏览器 √</li><li>foxmail √</li><li>qq 微信 √</li><li>网易云音乐 √</li><li>teamviewer √</li><li>番茄土豆 √</li><li>potplayer √</li><li>迅雷 √</li><li>ps </li><li>wps √</li><li>TightVNC</li><li>搜狗输入法 √</li><li>gitbook</li></ol><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ol><li>nvm-windows √</li><li>node npm yarn √</li><li>arc</li><li>java</li><li>python 2.7.13 √</li><li>ruby</li><li>php -&gt; vs studio 2017 要修改php.ini 参考 <a href="http://blog.csdn.net/rilyu/article/details/37379873" target="_blank" rel="external">http://blog.csdn.net/rilyu/article/details/37379873</a> √ </li></ol><h4 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h4><ol><li>hexo-cli √</li><li>weex-toolkit √</li><li></li></ol><h3 id="开发软件"><a href="#开发软件" class="headerlink" title="开发软件"></a>开发软件</h3><ol><li>gitkraken √</li><li>sourcetree √</li><li>vscode √</li><li>cmder √</li><li>git bash √</li><li>mongodb √</li><li>Robomongo 0.9.0-RC9 √</li><li>virtual box</li><li>webstorm</li><li>RedisDesktopManager</li><li>android studio</li><li>Charles</li><li>Genymotion</li><li>mysql-workbench</li><li>sublimeText √</li><li>notepad++ √</li><li>TortoiseSVN</li><li>atom</li><li>mysql</li><li>IntelliJ IDEA 2017.1.2</li><li></li></ol><h3 id="以管理员身份运行"><a href="#以管理员身份运行" class="headerlink" title="以管理员身份运行"></a>以管理员身份运行</h3><p>1.运行CMD（以管理员权限运行）<br>2.输入以下命令： msiexec /package “你安装程序包的路径”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;装机软件&quot;&gt;&lt;a href=&quot;#装机软件&quot; class=&quot;headerlink&quot; title=&quot;装机软件&quot;&gt;&lt;/a&gt;装机软件&lt;/h1&gt;&lt;h2 id=&quot;常用&quot;&gt;&lt;a href=&quot;#常用&quot; class=&quot;headerlink&quot; title=&quot;常用&quot;&gt;&lt;/a&gt;常用&lt;/h
      
    
    </summary>
    
      <category term="software" scheme="https://aoping.github.io/categories/software/"/>
    
    
      <category term="software" scheme="https://aoping.github.io/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>linux-tution</title>
    <link href="https://aoping.github.io/2017/11/13/linux-tution/"/>
    <id>https://aoping.github.io/2017/11/13/linux-tution/</id>
    <published>2017-11-13T14:24:47.000Z</published>
    <updated>2017-11-13T14:24:47.947Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用软件</title>
    <link href="https://aoping.github.io/2017/11/12/software-index/"/>
    <id>https://aoping.github.io/2017/11/12/software-index/</id>
    <published>2017-11-12T07:58:07.000Z</published>
    <updated>2017-12-26T23:20:26.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h2><h3 id="vnc"><a href="#vnc" class="headerlink" title="vnc"></a>vnc</h3><ul><li>vncServer/ vnc-viewer</li><li>VNC轻松连接远程Linux桌面 <a href="https://jingyan.baidu.com/article/6c67b1d6f1bac92786bb1e6d.html" target="_blank" rel="external">https://jingyan.baidu.com/article/6c67b1d6f1bac92786bb1e6d.html</a></li><li>官网 <a href="https://www.realvnc.com/en/" target="_blank" rel="external">https://www.realvnc.com/en/</a></li></ul><h3 id="teamviewer"><a href="#teamviewer" class="headerlink" title="teamviewer"></a>teamviewer</h3><h3 id="ppt"><a href="#ppt" class="headerlink" title="ppt"></a>ppt</h3><p><a href="http://www.slideshare.net/(需翻墙" target="_blank" rel="external">http://www.slideshare.net/(需翻墙</a>)</p><h3 id="RescueTime"><a href="#RescueTime" class="headerlink" title="RescueTime"></a>RescueTime</h3><p>一款著名的跨平台行为追踪时间记录服务<br><a href="https://www.rescuetime.com" target="_blank" rel="external">https://www.rescuetime.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;远程桌面&quot;&gt;&lt;a href=&quot;#远程桌面&quot; class=&quot;headerlink&quot; title=&quot;远程桌面&quot;&gt;&lt;/a&gt;远程桌面&lt;/h2&gt;&lt;h3 id=&quot;vnc&quot;&gt;&lt;a href=&quot;#vnc&quot; class=&quot;headerlink&quot; title=&quot;vnc&quot;&gt;&lt;/a&gt;vn
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://aoping.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="软件" scheme="https://aoping.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>node代码片段</title>
    <link href="https://aoping.github.io/2017/11/08/node-code/"/>
    <id>https://aoping.github.io/2017/11/08/node-code/</id>
    <published>2017-11-08T12:49:47.000Z</published>
    <updated>2017-11-12T10:48:57.591Z</updated>
    
    <content type="html"><![CDATA[<ul><li>下载网络资源</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* url 网络文件地址</span></div><div class="line"><span class="comment">* filename 文件名</span></div><div class="line"><span class="comment">* callback 回调函数</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">uri,filename,callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> stream = fs.createWriteStream(filename);</div><div class="line">    request(uri).pipe(stream).on(<span class="string">'close'</span>, callback); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> fileUrl  = <span class="string">'http://p4.so.qhimgs1.com/t01cab6339ead2b1894.jpg'</span>;</div><div class="line"><span class="keyword">var</span> filename = <span class="string">'1.jpg'</span>;</div><div class="line">downloadFile(fileUrl,filename,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'close'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;下载网络资源&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://aoping.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://aoping.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>node爬虫</title>
    <link href="https://aoping.github.io/2017/11/06/node-crawler/"/>
    <id>https://aoping.github.io/2017/11/06/node-crawler/</id>
    <published>2017-11-06T05:12:09.000Z</published>
    <updated>2017-11-12T10:48:57.592Z</updated>
    
    <content type="html"><![CDATA[<p>Puppeteer<br>electron<br>nightmare<br>PhantomJS</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Puppeteer&lt;br&gt;electron&lt;br&gt;nightmare&lt;br&gt;PhantomJS&lt;/p&gt;

      
    
    </summary>
    
      <category term="学习笔记" scheme="https://aoping.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node 爬虫" scheme="https://aoping.github.io/tags/node-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>学习清单</title>
    <link href="https://aoping.github.io/2017/11/05/learn-list/"/>
    <id>https://aoping.github.io/2017/11/05/learn-list/</id>
    <published>2017-11-05T07:01:37.000Z</published>
    <updated>2017-11-05T07:05:55.087Z</updated>
    
    <content type="html"><![CDATA[<ul><li>makefile  <a href="http://blog.csdn.net/ruglcc/article/details/7814546/" target="_blank" rel="external">http://blog.csdn.net/ruglcc/article/details/7814546/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;makefile  &lt;a href=&quot;http://blog.csdn.net/ruglcc/article/details/7814546/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/ruglcc
      
    
    </summary>
    
      <category term="个人" scheme="https://aoping.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="任务" scheme="https://aoping.github.io/tags/%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>笔记</title>
    <link href="https://aoping.github.io/2017/11/01/notes/"/>
    <id>https://aoping.github.io/2017/11/01/notes/</id>
    <published>2017-11-01T02:57:49.000Z</published>
    <updated>2017-11-01T14:58:32.300Z</updated>
    
    <content type="html"><![CDATA[<ul><li>控制台输出到txt<br>C:\你输入的命令 &gt;output.txt</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;控制台输出到txt&lt;br&gt;C:\你输入的命令 &amp;gt;output.txt&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node-npm</title>
    <link href="https://aoping.github.io/2017/10/31/node-npm/"/>
    <id>https://aoping.github.io/2017/10/31/node-npm/</id>
    <published>2017-10-31T06:58:14.000Z</published>
    <updated>2017-12-23T02:08:11.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用依赖"><a href="#常用依赖" class="headerlink" title="常用依赖"></a>常用依赖</h2><ul><li>把变量加载入process.env dotenv</li><li>控制台颜色     colors  chalks</li><li>路径    path</li><li>日志    log4js</li><li>http request logger   morgan</li><li>跨站请求伪造    csurf</li><li>压缩    compression</li><li>文件上传  connect-busboy</li><li>错误处理  errorhandler</li><li>跨域    cors</li><li>处理回调  eventproxy async promise bluebird</li><li>事件驱动  eventproxy</li><li>请求  request</li></ul><h2 id="流处理"><a href="#流处理" class="headerlink" title="流处理"></a>流处理</h2><p>through2<br>concat-stream</p><h2 id="常用工具类"><a href="#常用工具类" class="headerlink" title="常用工具类"></a>常用工具类</h2><ul><li>容量转换  bytes</li><li>日期转换  monents</li><li>xml   xmlbuilder</li><li>表单验证  validator</li><li>加密    bcryptjs utility</li><li>node-uuid</li></ul><h2 id="express常用依赖"><a href="#express常用依赖" class="headerlink" title="express常用依赖"></a>express常用依赖</h2><ul><li>session   express-session</li><li>RedisStore    connect-redis</li><li>redis client  ioredis</li></ul><h2 id="安装失败"><a href="#安装失败" class="headerlink" title="安装失败"></a>安装失败</h2><h3 id="安装node-sass失败"><a href="#安装node-sass失败" class="headerlink" title="安装node-sass失败"></a>安装node-sass失败</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用cnpm install重装</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用依赖&quot;&gt;&lt;a href=&quot;#常用依赖&quot; class=&quot;headerlink&quot; title=&quot;常用依赖&quot;&gt;&lt;/a&gt;常用依赖&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;把变量加载入process.env dotenv&lt;/li&gt;
&lt;li&gt;控制台颜色     colors  chal
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://aoping.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node npm" scheme="https://aoping.github.io/tags/node-npm/"/>
    
  </entry>
  
  <entry>
    <title>js-utils</title>
    <link href="https://aoping.github.io/2017/10/24/js-utils/"/>
    <id>https://aoping.github.io/2017/10/24/js-utils/</id>
    <published>2017-10-23T16:16:35.000Z</published>
    <updated>2017-10-23T16:20:51.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * js常用工具类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 方法作用：【格式化时间】</span></div><div class="line"><span class="comment"> * 使用方法</span></div><div class="line"><span class="comment"> * 示例：</span></div><div class="line"><span class="comment"> *      使用方式一：</span></div><div class="line"><span class="comment"> *      var now = new Date();</span></div><div class="line"><span class="comment"> *      var nowStr = now.dateFormat("yyyy-MM-dd hh:mm:ss");</span></div><div class="line"><span class="comment"> *      使用方式二：</span></div><div class="line"><span class="comment"> *      new Date().dateFormat("yyyy年MM月dd日");</span></div><div class="line"><span class="comment"> *      new Date().dateFormat("MM/dd/yyyy");</span></div><div class="line"><span class="comment"> *      new Date().dateFormat("yyyyMMdd");</span></div><div class="line"><span class="comment"> *      new Date().dateFormat("yyyy-MM-dd hh:mm:ss");</span></div><div class="line"><span class="comment"> * @param format &#123;date&#125; 传入要格式化的日期类型</span></div><div class="line"><span class="comment"> * @returns &#123;2015-01-31 16:30:00&#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="built_in">Date</span>.prototype.dateFormat = <span class="function"><span class="keyword">function</span> (<span class="params">format</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = &#123;</div><div class="line">        <span class="string">"M+"</span> : <span class="keyword">this</span>.getMonth()+<span class="number">1</span>, <span class="comment">//month</span></div><div class="line">        <span class="string">"d+"</span> : <span class="keyword">this</span>.getDate(), <span class="comment">//day</span></div><div class="line">        <span class="string">"h+"</span> : <span class="keyword">this</span>.getHours(), <span class="comment">//hour</span></div><div class="line">        <span class="string">"m+"</span> : <span class="keyword">this</span>.getMinutes(), <span class="comment">//minute</span></div><div class="line">        <span class="string">"s+"</span> : <span class="keyword">this</span>.getSeconds(), <span class="comment">//second</span></div><div class="line">        <span class="string">"q+"</span> : <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth()+<span class="number">3</span>)/<span class="number">3</span>), <span class="comment">//quarter</span></div><div class="line">        <span class="string">"S"</span> : <span class="keyword">this</span>.getMilliseconds() <span class="comment">//millisecond</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/(y+)/</span>.test(format)) &#123;</div><div class="line">        format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear()+<span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span>+ k +<span class="string">")"</span>).test(format)) &#123;</div><div class="line">            format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, <span class="built_in">RegExp</span>.$<span class="number">1.</span>length==<span class="number">1</span> ? o[k] : (<span class="string">"00"</span>+ o[k]).substr((<span class="string">""</span>+ o[k]).length));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> format;</div><div class="line">&#125;</div><div class="line"><span class="comment">/***********************************************************************</span></div><div class="line"><span class="comment"> *                           日期时间工具类                            *</span></div><div class="line"><span class="comment"> *                     注：调用方式，deteUtil.方法名                   *</span></div><div class="line"><span class="comment"> * ********************************************************************/</span></div><div class="line"><span class="keyword">var</span> dateUtil = &#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 方法作用：【取传入日期是星期几】</span></div><div class="line"><span class="comment">     * 使用方法：dateUtil.nowFewWeeks(new Date());</span></div><div class="line"><span class="comment">     * @param date&#123;date&#125; 传入日期类型</span></div><div class="line"><span class="comment">     * @returns &#123;星期四，...&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    nowFewWeeks:<span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(date <span class="keyword">instanceof</span> <span class="built_in">Date</span>)&#123;</div><div class="line">            <span class="keyword">var</span> dayNames = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"星期天"</span>,<span class="string">"星期一"</span>,<span class="string">"星期二"</span>,<span class="string">"星期三"</span>,<span class="string">"星期四"</span>,<span class="string">"星期五"</span>,<span class="string">"星期六"</span>);</div><div class="line">            <span class="keyword">return</span> dayNames[date.getDay()];</div><div class="line">        &#125; <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Param error,date type!"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 方法作用：【字符串转换成日期】</span></div><div class="line"><span class="comment">     * 使用方法：dateUtil.strTurnDate("2010-01-01");</span></div><div class="line"><span class="comment">     * @param str &#123;String&#125;字符串格式的日期，传入格式：yyyy-mm-dd(2015-01-31)</span></div><div class="line"><span class="comment">     * @return &#123;Date&#125;由字符串转换成的日期</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    strTurnDate:<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span>   re   =   <span class="regexp">/^(\d&#123;4&#125;)\S(\d&#123;1,2&#125;)\S(\d&#123;1,2&#125;)$/</span>;</div><div class="line">        <span class="keyword">var</span>   dt;</div><div class="line">        <span class="keyword">if</span>   (re.test(str))&#123;</div><div class="line">            dt   =   <span class="keyword">new</span>   <span class="built_in">Date</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span>,<span class="built_in">RegExp</span>.$<span class="number">2</span>   -   <span class="number">1</span>,<span class="built_in">RegExp</span>.$<span class="number">3</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dt;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 方法作用：【计算2个日期之间的天数】</span></div><div class="line"><span class="comment">     * 传入格式：yyyy-mm-dd(2015-01-31)</span></div><div class="line"><span class="comment">     * 使用方法：dateUtil.dayMinus(startDate,endDate);</span></div><div class="line"><span class="comment">     * @startDate &#123;Date&#125;起始日期</span></div><div class="line"><span class="comment">     * @endDate &#123;Date&#125;结束日期</span></div><div class="line"><span class="comment">     * @return endDate - startDate的天数差</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    dayMinus:<span class="function"><span class="keyword">function</span>(<span class="params">startDate, endDate</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(startDate <span class="keyword">instanceof</span> <span class="built_in">Date</span> &amp;&amp; endDate <span class="keyword">instanceof</span> <span class="built_in">Date</span>)&#123;</div><div class="line">            <span class="keyword">var</span> days = <span class="built_in">Math</span>.floor((endDate-startDate)/(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>));</div><div class="line">            <span class="keyword">return</span> days;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Param error,date type!"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/***********************************************************************</span></div><div class="line"><span class="comment"> *                           加载工具类                                *</span></div><div class="line"><span class="comment"> *                     注：调用方式，loadUtil.方法名                   *</span></div><div class="line"><span class="comment"> * ********************************************************************/</span></div><div class="line"><span class="keyword">var</span> loadUtil = &#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 方法说明：【动态加载js文件css文件】</span></div><div class="line"><span class="comment">     * 使用方法：loadUtil.loadjscssfile("http://libs.baidu.com/jquery/1.9.1/jquery.js","js")</span></div><div class="line"><span class="comment">     * @param fileurl 文件路径，</span></div><div class="line"><span class="comment">     * @param filetype 文件类型，支持传入类型，js、css</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    loadjscssfile:<span class="function"><span class="keyword">function</span>(<span class="params">fileurl,filetype</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(filetype == <span class="string">"js"</span>)&#123;</div><div class="line">            <span class="keyword">var</span> fileref = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">            fileref.setAttribute(<span class="string">"type"</span>,<span class="string">"text/javascript"</span>);</div><div class="line">            fileref.setAttribute(<span class="string">"src"</span>,fileurl);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(filetype == <span class="string">"css"</span>)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> fileref = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</div><div class="line">            fileref.setAttribute(<span class="string">"rel"</span>,<span class="string">"stylesheet"</span>);</div><div class="line">            fileref.setAttribute(<span class="string">"type"</span>,<span class="string">"text/css"</span>);</div><div class="line">            fileref.setAttribute(<span class="string">"href"</span>,fileurl);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> fileref != <span class="string">"undefined"</span>)&#123;</div><div class="line">            <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(fileref);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            alert(<span class="string">"loadjscssfile method error!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/***********************************************************************</span></div><div class="line"><span class="comment"> *                           字符串操作工具类                          *</span></div><div class="line"><span class="comment"> *                     注：调用方式，strUtil.方法名                   *</span></div><div class="line"><span class="comment"> * ********************************************************************/</span></div><div class="line"><span class="keyword">var</span> strUtil = &#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 判断字符串是否为空</span></div><div class="line"><span class="comment">     * @param str 传入的字符串</span></div><div class="line"><span class="comment">     * @returns &#123;&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    isEmpty:<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(str != <span class="literal">null</span> &amp;&amp; str.length &gt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 判断两个字符串子否相同</span></div><div class="line"><span class="comment">     * @param str1</span></div><div class="line"><span class="comment">     * @param str2</span></div><div class="line"><span class="comment">     * @returns &#123;Boolean&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    isEquals:<span class="function"><span class="keyword">function</span>(<span class="params">str1,str2</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(str1==str2)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 忽略大小写判断字符串是否相同</span></div><div class="line"><span class="comment">     * @param str1</span></div><div class="line"><span class="comment">     * @param str2</span></div><div class="line"><span class="comment">     * @returns &#123;Boolean&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    isEqualsIgnorecase:<span class="function"><span class="keyword">function</span>(<span class="params">str1,str2</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(str1.toUpperCase() == str2.toUpperCase())&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 判断是否是数字</span></div><div class="line"><span class="comment">     * @param value</span></div><div class="line"><span class="comment">     * @returns &#123;Boolean&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    isNum:<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>( value != <span class="literal">null</span> &amp;&amp; value.length&gt;<span class="number">0</span> &amp;&amp; <span class="built_in">isNaN</span>(value) == <span class="literal">false</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 判断是否是中文</span></div><div class="line"><span class="comment">     * @param str</span></div><div class="line"><span class="comment">     * @returns &#123;Boolean&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    isChine:<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> reg = <span class="regexp">/^([u4E00-u9FA5]|[uFE30-uFFA0])*$/</span>;</div><div class="line">        <span class="keyword">if</span>(reg.test(str))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git教程</title>
    <link href="https://aoping.github.io/2017/10/22/git-tutorial/"/>
    <id>https://aoping.github.io/2017/10/22/git-tutorial/</id>
    <published>2017-10-22T03:16:58.000Z</published>
    <updated>2017-10-22T03:40:19.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>Git – fatal: Unable to create ‘XXX/.git/index.lock’</strong></p><ul><li>在.git同级目录，执行rm -f .git/index.lock （或者rm -f git/index.lock）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问题&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Git – fatal: Unable to create ‘XXX/.git/index.lock’&lt;/s
      
    
    </summary>
    
      <category term="git" scheme="https://aoping.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://aoping.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="https://aoping.github.io/2017/10/18/algorithm-javascript/"/>
    <id>https://aoping.github.io/2017/10/18/algorithm-javascript/</id>
    <published>2017-10-18T06:41:26.000Z</published>
    <updated>2017-11-01T14:58:42.060Z</updated>
    
    <content type="html"><![CDATA[<p>javascript实现算法</p><a id="more"></a><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>需求：在一个有序数组a中查找一个数n<br>算法：取中间键mid，比较a[mid]和n，n大就继续在右边查找，n小就在左边查找</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><h4 id="场景：-已知元素要求可以枚举"><a href="#场景：-已知元素要求可以枚举" class="headerlink" title="场景： 已知元素要求可以枚举"></a>场景： 已知元素要求可以枚举</h4><h4 id="算法：-初始化好空桶（值为0），再遍历数组数值放到对应的桶"><a href="#算法：-初始化好空桶（值为0），再遍历数组数值放到对应的桶" class="headerlink" title="算法： 初始化好空桶（值为0），再遍历数组数值放到对应的桶"></a>算法： 初始化好空桶（值为0），再遍历数组数值放到对应的桶</h4><h4 id="javascript实现"><a href="#javascript实现" class="headerlink" title="javascript实现"></a>javascript实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> arry = []</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>; i&lt;<span class="number">11</span>;i++) &#123;</div><div class="line">    arry[i] =<span class="number">0</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;a.length;i++) &#123;</div><div class="line">    arry[a[i]]++</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>;i&lt;<span class="number">11</span>;i++) &#123;</div><div class="line">    <span class="keyword">if</span>(arry[i]!==<span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j= <span class="number">0</span>;j&lt;arry[i];j++) &#123;</div><div class="line">      <span class="built_in">console</span>.log(i)</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sort([<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>])</div></pre></td></tr></table></figure><h4 id="算法时间复杂度-O-M-N-m是桶的数量，n是要排序的数组大小"><a href="#算法时间复杂度-O-M-N-m是桶的数量，n是要排序的数组大小" class="headerlink" title="算法时间复杂度 O(M+N) m是桶的数量，n是要排序的数组大小"></a>算法时间复杂度 O(M+N) m是桶的数量，n是要排序的数组大小</h4><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li>优点：快</li><li>缺点： 浪费空间</li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="算法：每次比较两个相邻的元素，如果顺序错了就交换位置-第一次遍历：比较第1、2位，再比较2、3位，至n位，第二次遍历比较第1、2位，再比较2、3位，至n-1位-…此过程中遍历几次，最后几位就是排好序的"><a href="#算法：每次比较两个相邻的元素，如果顺序错了就交换位置-第一次遍历：比较第1、2位，再比较2、3位，至n位，第二次遍历比较第1、2位，再比较2、3位，至n-1位-…此过程中遍历几次，最后几位就是排好序的" class="headerlink" title="算法：每次比较两个相邻的元素，如果顺序错了就交换位置(第一次遍历：比较第1、2位，再比较2、3位，至n位，第二次遍历比较第1、2位，再比较2、3位，至n-1位,…此过程中遍历几次，最后几位就是排好序的)"></a>算法：每次比较两个相邻的元素，如果顺序错了就交换位置(第一次遍历：比较第1、2位，再比较2、3位，至n位，第二次遍历比较第1、2位，再比较2、3位，至n-1位,…此过程中遍历几次，最后几位就是排好序的)</h4><h4 id="javascript实现-1"><a href="#javascript实现-1" class="headerlink" title="javascript实现"></a>javascript实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;a.length-i<span class="number">-1</span>;j++)&#123;</div><div class="line">      <span class="keyword">if</span>(a[j]&lt;a[j+<span class="number">1</span>]) &#123;</div><div class="line">      <span class="keyword">let</span> tmp = a[j]</div><div class="line">      a[j] = a[j+<span class="number">1</span>]</div><div class="line">      a[j+<span class="number">1</span>] = tmp</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line">&#125;</div><div class="line"></div><div class="line">sort([<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>])</div></pre></td></tr></table></figure><h4 id="算法时间复杂度-O-n-2-，一般不用"><a href="#算法时间复杂度-O-n-2-，一般不用" class="headerlink" title="算法时间复杂度 O(n*2)，一般不用"></a>算法时间复杂度 O(n*2)，一般不用</h4><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li>缺点： 慢</li><li>优点： 节约空间（相对于桶排序）</li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="算法：一个数组a-先随便找一个基准数-一般设start-0第一个设为k-a-start-，然后i从左到右查找第一个大于k的数a-i-，j从右到左找第一个小于k的数a-j-，如果i不大于j则交换两个数字继续遍历，遍历结束交换a-start-和a-j-这样位置j左边的都小于k-右边都大于k"><a href="#算法：一个数组a-先随便找一个基准数-一般设start-0第一个设为k-a-start-，然后i从左到右查找第一个大于k的数a-i-，j从右到左找第一个小于k的数a-j-，如果i不大于j则交换两个数字继续遍历，遍历结束交换a-start-和a-j-这样位置j左边的都小于k-右边都大于k" class="headerlink" title="算法：一个数组a,先随便找一个基准数,一般设start=0第一个设为k=a[start]，然后i从左到右查找第一个大于k的数a[i]，j从右到左找第一个小于k的数a[j]，如果i不大于j则交换两个数字继续遍历，遍历结束交换a[start]和a[j],这样位置j左边的都小于k,右边都大于k"></a>算法：一个数组a,先随便找一个基准数,一般设start=0第一个设为k=a[start]，然后i从左到右查找第一个大于k的数a[i]，j从右到左找第一个小于k的数a[j]，如果i不大于j则交换两个数字继续遍历，遍历结束交换a[start]和a[j],这样位置j左边的都小于k,右边都大于k</h4><p>接着位置j左右两边继续上诉操作</p><h4 id="javascript实现-2"><a href="#javascript实现-2" class="headerlink" title="javascript实现"></a>javascript实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><p>在不同情况下使用不同的算法</p><h3 id="计数排序-基数排序-插入排序-归并排序-堆排序"><a href="#计数排序-基数排序-插入排序-归并排序-堆排序" class="headerlink" title="计数排序 基数排序 插入排序 归并排序 堆排序"></a>计数排序 基数排序 插入排序 归并排序 堆排序</h3><h2 id="队列-栈-链表"><a href="#队列-栈-链表" class="headerlink" title="队列 栈 链表"></a>队列 栈 链表</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列有三个基本元素： 一个数组 一个头 一个尾<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct queue &#123;</div><div class="line">  let data[100]; // 队列主体</div><div class="line">  let head; // 队首</div><div class="line">  let tail; // 队尾</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h4><ul><li>判断是否是回文字符</li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>元素： 值、指向下一元素的指针</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><ol><li>最终结束条件</li><li>边界条件</li><li>遍历的情况<br>首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未被访问过的顶点：当没有未被访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有顶点都被访问过。</li></ol><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><p>用一个数组记录可以走的节点<br>另用一个数组记录下来已经遍历过的节点,再以此为出发点进行搜索</p><p>首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点，再访问它们相邻的未被访问过的顶点，知道所有顶点都被访问过，遍历结束</p><h2 id="dijkstra算法"><a href="#dijkstra算法" class="headerlink" title="dijkstra算法"></a>dijkstra算法</h2><p>计算某点到任意一点的最短距离，先可以直接到达的里选最短，再以此为起点重复上述步骤</p><h1 id="代表性算法"><a href="#代表性算法" class="headerlink" title="代表性算法"></a>代表性算法</h1><h2 id="专用于数论计算的算法"><a href="#专用于数论计算的算法" class="headerlink" title="专用于数论计算的算法"></a>专用于数论计算的算法</h2><ul><li>求解最大公约数的辗转算法</li><li>求解联立方程的高斯消元法</li><li>求解定积分近似值的梯形公式</li><li>计算质数的艾拉托斯尼筛法</li></ul><h2 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h2><ul><li>选择排序</li><li>冒泡排序</li><li>插入排序</li><li>希尔排序</li><li>归并排序</li><li>快速排序</li></ul><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ul><li>线性搜索</li><li>二分搜索</li></ul><h2 id="查找子串"><a href="#查找子串" class="headerlink" title="查找子串"></a>查找子串</h2><ul><li>简单字符串搜索</li><li>KMP算法</li><li>BM算法</li></ul><h1 id="结构化编程思想"><a href="#结构化编程思想" class="headerlink" title="结构化编程思想"></a>结构化编程思想</h1><p>所有流程都可以用以下三种结构来组合</p><ul><li>顺序结构</li><li>选择结构</li><li>循环结构</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript实现算法&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://aoping.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="algorithm javascript" scheme="https://aoping.github.io/tags/algorithm-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Windows安装使用Arcanist</title>
    <link href="https://aoping.github.io/2017/10/17/software-arcanist/"/>
    <id>https://aoping.github.io/2017/10/17/software-arcanist/</id>
    <published>2017-10-17T08:32:57.000Z</published>
    <updated>2017-10-17T15:01:42.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装php环境"><a href="#安装php环境" class="headerlink" title="安装php环境"></a>安装php环境</h2><p>可以参考 <a href="/2017/10/17/software-php/" title="点击这里查看这篇文章">点击这里查看这篇文章</a></p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>官网下载：<a href="https://git-for-windows.github.io/" target="_blank" rel="external">https://git-for-windows.github.io/</a><br>打开exe程序进行安装即可</p><a id="more"></a><h2 id="安装Arcanist-和-libphutil"><a href="#安装Arcanist-和-libphutil" class="headerlink" title="安装Arcanist 和 libphutil"></a>安装Arcanist 和 libphutil</h2><p>参考：<a href="https://secure.phabricator.com/book/phabricator/article/arcanist/#installing-arcanist" target="_blank" rel="external">https://secure.phabricator.com/book/phabricator/article/arcanist/#installing-arcanist</a><br>新建一个目录arcanist,在目录下打开git bash，使用下面的命令clone项目<br>git clone <a href="https://github.com/phacility/libphutil.git" target="_blank" rel="external">https://github.com/phacility/libphutil.git</a><br>git clone <a href="https://github.com/phacility/arcanist.git" target="_blank" rel="external">https://github.com/phacility/arcanist.git</a></p><p>配置Path环境变量： G:\arcanist\arcanist\bin;</p><h2 id="配置arc环境"><a href="#配置arc环境" class="headerlink" title="配置arc环境"></a>配置arc环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arc set-config default &lt;uri&gt; // uri替换成Phabricator地址，例：arc set-config default https://phabricator.example.com/</div></pre></td></tr></table></figure><h2 id="配置arc编辑器"><a href="#配置arc编辑器" class="headerlink" title="配置arc编辑器"></a>配置arc编辑器</h2><p>使用Arcanist时需要使用文本编辑器编辑大块的文本，不能使用微软自带的NotePad，有以下Windows平台的编辑器可供选择：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Notepad++</div><div class="line">$ arc set-config editor &quot;\&quot;C:\Program Files (x86)\Notepad++\notepad++.exe\&quot; -multiInst -nosession&quot;</div><div class="line">此命令是配置Notepad++的，需要你更改安装目录</div><div class="line"></div><div class="line">vim</div><div class="line">$ arc set-config editor &quot;\&quot;C:\Program Files (x86)\Git\share\vim\vim73\vim.exe\&quot;&quot;</div><div class="line">此命令是配置vim的，需要你更改安装目录</div><div class="line"></div><div class="line">GitPad</div><div class="line">$ arc set-config editor &quot;\&quot;C:\Users\yourusername\AppData\Roaming\GitPad\GitPad.exe\&quot;&quot;</div><div class="line">此命令是配置GitPad的，需要你更改安装目录</div><div class="line"></div><div class="line">Sublime Text</div><div class="line">$ arc set-config editor &quot;\&quot;C:\Program Files\Sublime Text 2\sublime_text.exe\&quot; -w -n&quot;</div><div class="line">此命令是配置Sublime Text的，需要你更改安装目录</div></pre></td></tr></table></figure></p><h2 id="配置token"><a href="#配置token" class="headerlink" title="配置token"></a>配置token</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arc install-certificate</div></pre></td></tr></table></figure><p>打开提示中的地址，登录复制token就可以了</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.jianshu.com/p/b21c93d41803" target="_blank" rel="external">http://www.jianshu.com/p/b21c93d41803</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装php环境&quot;&gt;&lt;a href=&quot;#安装php环境&quot; class=&quot;headerlink&quot; title=&quot;安装php环境&quot;&gt;&lt;/a&gt;安装php环境&lt;/h2&gt;&lt;p&gt;可以参考 &lt;a href=&quot;/2017/10/17/software-php/&quot; title=&quot;点击这里查看这篇文章&quot;&gt;点击这里查看这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装git&quot;&gt;&lt;a href=&quot;#安装git&quot; class=&quot;headerlink&quot; title=&quot;安装git&quot;&gt;&lt;/a&gt;安装git&lt;/h2&gt;&lt;p&gt;官网下载：&lt;a href=&quot;https://git-for-windows.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://git-for-windows.github.io/&lt;/a&gt;&lt;br&gt;打开exe程序进行安装即可&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://aoping.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Arcanist" scheme="https://aoping.github.io/tags/Arcanist/"/>
    
  </entry>
  
  <entry>
    <title>php安装</title>
    <link href="https://aoping.github.io/2017/10/17/software-php/"/>
    <id>https://aoping.github.io/2017/10/17/software-php/</id>
    <published>2017-10-17T06:26:19.000Z</published>
    <updated>2017-10-17T15:01:42.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows下PHP环境的搭建"><a href="#windows下PHP环境的搭建" class="headerlink" title="windows下PHP环境的搭建:"></a>windows下PHP环境的搭建:</h2><p><a href="https://segmentfault.com/a/1190000003409708" target="_blank" rel="external">https://segmentfault.com/a/1190000003409708</a></p><a id="more"></a><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><h4 id="执行httpd-k-install-发生-could-not-bind-to-address-0-0-0-0-80"><a href="#执行httpd-k-install-发生-could-not-bind-to-address-0-0-0-0-80" class="headerlink" title="执行httpd -k install 发生 could not bind to address 0.0.0.0:80"></a>执行httpd -k install 发生 could not bind to address 0.0.0.0:80</h4><p>这是因为iis占用了80端口<br>可以在管理员权限下cmd执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Windows 7/Vista</div><div class="line">net stop was /y</div><div class="line">or XP:</div><div class="line">net stop iisadmin /y</div></pre></td></tr></table></figure></p><p><a href="https://www.sitepoint.com/unblock-port-80-on-windows-run-apache/" target="_blank" rel="external">https://www.sitepoint.com/unblock-port-80-on-windows-run-apache/</a></p><h2 id="在windows下的CLI模式下如何运行php文件"><a href="#在windows下的CLI模式下如何运行php文件" class="headerlink" title="在windows下的CLI模式下如何运行php文件"></a>在windows下的CLI模式下如何运行php文件</h2><p><a href="https://jingyan.baidu.com/article/da1091fb096c97027849d68e.html" target="_blank" rel="external">https://jingyan.baidu.com/article/da1091fb096c97027849d68e.html</a></p><h3 id="错误-1"><a href="#错误-1" class="headerlink" title="错误"></a>错误</h3><h4 id="search-path-c-usr-share-snmp-mibs-cannot-find-module-ip-mib-at-line-0-in-none"><a href="#search-path-c-usr-share-snmp-mibs-cannot-find-module-ip-mib-at-line-0-in-none" class="headerlink" title="search path c /usr/share/snmp/mibs cannot find module (ip-mib) at line 0 in (none)"></a>search path c /usr/share/snmp/mibs cannot find module (ip-mib) at line 0 in (none)</h4><p><a href="https://stackoverflow.com/questions/16467712/php-snmp-cannot-find-module" target="_blank" rel="external">https://stackoverflow.com/questions/16467712/php-snmp-cannot-find-module</a></p><p>  Open your php.ini and add some magical semicolon at line that look like:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extension=php_snmp.dll</div></pre></td></tr></table></figure></p><p>  It should look like:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;extension=php_snmp.dll</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;windows下PHP环境的搭建&quot;&gt;&lt;a href=&quot;#windows下PHP环境的搭建&quot; class=&quot;headerlink&quot; title=&quot;windows下PHP环境的搭建:&quot;&gt;&lt;/a&gt;windows下PHP环境的搭建:&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003409708&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000003409708&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://aoping.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="software php" scheme="https://aoping.github.io/tags/software-php/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu使用技巧</title>
    <link href="https://aoping.github.io/2017/10/15/ubuntu-keyword/"/>
    <id>https://aoping.github.io/2017/10/15/ubuntu-keyword/</id>
    <published>2017-10-15T01:25:37.000Z</published>
    <updated>2017-11-11T11:58:04.959Z</updated>
    
    <content type="html"><![CDATA[<p><strong>分屏显示</strong></p><ul><li>ctrl+Windowskey(Super key)+上下左右</li></ul><p><strong>多窗口分屏式终端–Terminatgongzuoquor</strong></p><ul><li>可在同一屏打开多个窗口，安装如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install terminator</div></pre></td></tr></table></figure></li></ul><p><img src="1.png" alt="1.png"><br><strong>显示桌面/开启工作区</strong></p><ul><li>依次打开系统设置，外观，行为，在中间有开启工作区和添加“显示桌面”图标到启动器，勾选即可</li><li>alt+ctrl+方向箭头 切换工作区<a id="more"></a></li></ul><p><strong>显示隐藏文件</strong></p><ul><li>ctrl+h</li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><strong>创建用户</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">useradd zoro -m -s /bin/bash</div><div class="line">passwd zoro</div><div class="line">su zoro</div><div class="line">gpasswd -a zoro sudo //sudo分组</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;分屏显示&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctrl+Windowskey(Super key)+上下左右&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;多窗口分屏式终端–Terminatgongzuoquor&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可在同一屏打开多个窗口，安装如下&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install terminator&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;1.png&quot; alt=&quot;1.png&quot;&gt;&lt;br&gt;&lt;strong&gt;显示桌面/开启工作区&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依次打开系统设置，外观，行为，在中间有开启工作区和添加“显示桌面”图标到启动器，勾选即可&lt;/li&gt;
&lt;li&gt;alt+ctrl+方向箭头 切换工作区
    
    </summary>
    
      <category term="ubuntu" scheme="https://aoping.github.io/categories/ubuntu/"/>
    
    
      <category term="ubuntu 使用技巧" scheme="https://aoping.github.io/tags/ubuntu-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>express知识点</title>
    <link href="https://aoping.github.io/2017/10/15/node-express/"/>
    <id>https://aoping.github.io/2017/10/15/node-express/</id>
    <published>2017-10-15T00:50:13.000Z</published>
    <updated>2017-11-05T07:55:00.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装express"><a href="#安装express" class="headerlink" title="安装express"></a>安装express</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i express -g</div></pre></td></tr></table></figure><h2 id="express生成器"><a href="#express生成器" class="headerlink" title="express生成器"></a>express生成器</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i express-generator -g</div></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">express -h // 帮助</div><div class="line">express myapp //生成app</div></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd myapp</div><div class="line">npm i</div></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DEBUG=myapp npm start  // mac or linux</div><div class="line">set DEBUG=myapp &amp; npm start // windows</div></pre></td></tr></table></figure><h2 id="express架构"><a href="#express架构" class="headerlink" title="express架构"></a>express架构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app -&gt;  router  -&gt;  controller  -&gt; model   -&gt; mongoose</div><div class="line">                                -&gt; view    -&gt; pug/html</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;)</div><div class="line">var app = express()</div><div class="line"></div><div class="line">// view engine setup</div><div class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</div><div class="line">app.set(&apos;view engine&apos;, &apos;jade&apos;);</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</div><div class="line"><span class="keyword">var</span> RedisStore = <span class="built_in">require</span>(<span class="string">'connect-redis'</span>)(session);</div><div class="line">app.use(<span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)(config.session_secret));</div><div class="line">app.use(session(&#123;</div><div class="line">  secret: config.session_secret,</div><div class="line">  store: <span class="keyword">new</span> RedisStore(&#123;</div><div class="line">    port: config.redis_port,</div><div class="line">    host: config.redis_host,</div><div class="line">    db: config.redis_db,</div><div class="line">    pass: config.redis_password,</div><div class="line">  &#125;),</div><div class="line">  resave: <span class="literal">false</span>,</div><div class="line">  saveUninitialized: <span class="literal">false</span>,</div><div class="line">&#125;));</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装express&quot;&gt;&lt;a href=&quot;#安装express&quot; class=&quot;headerlink&quot; title=&quot;安装express&quot;&gt;&lt;/a&gt;安装express&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="node" scheme="https://aoping.github.io/categories/node/"/>
    
    
      <category term="node express 学习笔记" scheme="https://aoping.github.io/tags/node-express-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
